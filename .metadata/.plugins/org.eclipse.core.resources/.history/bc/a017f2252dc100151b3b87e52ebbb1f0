//irshusdock & arkessler
//Class for a board state. Includes the locations of pieces in the board, checks on if pops have been used, and whose turn it is

import java.util.ArrayList;
public class Board {
	
	private int[][] boardState; //The board. 0s represent empty spaces, 1's represent player 1's pieces, 2's represent player 2's pieces
	private int rows; //The number of rows on the board
	private int cols; //The number of cols on the board
	private boolean player1popused; //Boolean for if player 1 has used their pop
	private boolean player2popused; //Boolean for if player 2 has used their pop
	private int turn; //Whos turn it is. 1 represents player 1's turn, 2 represents player 2's turn. It represents the player to make the next move
	//In regards to turn: If player1 is going first, the empty board's turn is P1. It represents that P1 can make the next move
	
	private int n; //The number of pieces in a row to win
	private int evaluationValue; //The evaluation value of the current board state
	private ArrayList<Board> nextPossibleBoards; //All the possible boards that can come from this board 
	private Move moveToGetThisBoard; //The move that was done to get this board

	//Constants
	public final static int P1 = 1;
	public final static int P2 = 2;
	public final static int BOARD_STATE_EMPTY = 0;
	public final static int BOARD_STATE_PLAYER1 = 1;
	public final static int BOARD_STATE_PLAYER2 = 2;
	public final static int MOVE_TYPE_PUT = 1;
	public final static int MOVE_TYPE_POP = 0;
	
	public Board(){
		
	}
	
	//Evaluate the state of a board. currentDepth is the depth of the board (where the current game state is
	//at depth 0) and maxDepth is the depth to evaluate to.
	//alpha is the max value seen, beta is the min value seen
	//NOTE: This function currently generates the subsequent moves
	public int evaluateToDepth(int currentDepth, int maxDepth, int alpha, int beta){
		
		//Base Case: currentDepth = maxDepth
		//Run the evaluation function and return the result
		if(currentDepth == maxDepth){
			this.evaluate();
			return this.getEvaluationValue();
		}
		
		//Not Base Case: currentDepth < maxDepth
		//Generate children
		//Run the evaluation function on each child
		//Then determine the best child based on whose turn it is
		//Then return the value of the best child board
		
		this.generatePossibleBoards(); //TODO: MAYBE CHANGE WHERE THIS OCCURS

		//Evaluate each child board. Pass currentDepth+1 because the children are 1 move deeper
		for(Board childBoard: this.nextPossibleBoards){
			int currentValue = childBoard.evaluateToDepth(currentDepth+1, maxDepth, alpha, beta);
			
			//If we are maximizing
			if(turn == P1){
				if(currentValue > alpha){
					alpha = currentValue;
				}
				if(alpha > beta){
					return alpha;
				}
			}
			
			//If we are minimizing
			if(turn == P2){
				if(currentValue < beta){
					beta = currentValue;
				}
				if(alpha > beta){
					return beta;
				}
			}
		}
		
		if(turn == P1){
			return alpha;
		}
		else{
			return beta;
		}
		
		/*//Player 1 will maximize the board values
		if(turn == P1){
			int maxEvaluationValue = nextPossibleBoards.get(0).getEvaluationValue();
			
			for(Board childBoard: this.nextPossibleBoards){
				
				if(childBoard.getEvaluationValue() > maxEvaluationValue){
					maxEvaluationValue = childBoard.getEvaluationValue();
				}
				
			}
			return maxEvaluationValue;
		}
		//Player 2 will minimize the board values
		else{
			int minEvaluationValue = nextPossibleBoards.get(0).getEvaluationValue();
			
			for(Board childBoard: this.nextPossibleBoards){
				
				if(childBoard.getEvaluationValue() < minEvaluationValue){
					minEvaluationValue = childBoard.getEvaluationValue();
				}
				
			}
			return minEvaluationValue;
		}*/
		
		
	}
	
	//Evaluation/Heuristic function. Sets the evaluationValue to the numeric value of this function
	public void evaluate(){
		//TODO: INSERT EVALUATION FUNCTION LOGIC HERE
		int functionResult = 0;
		
		evaluationValue = functionResult;
	}
	
	//Generate all possible boards that can come from this board and assign their moves, turns, and board states, and if a pop was used
	public void generatePossibleBoards(){
		//Type 1: Put
		//Need to set move, change board state, change turn
		int openRowIndex;
		
		for(int i = 0; i < this.cols; i++){
			//Determine the open row value for each column
			openRowIndex = this.getOpenRow(i);
			
			//Make all valid Put moves
			if(openRowIndex != -1){
				Board nextBoard = new Board();
				nextBoard.setBoardState(this.boardState);
				nextBoard.setTurn(this.turn);
				nextBoard.setN(this.n);
				
				Move nextMove = new Move(MOVE_TYPE_PUT, i);
				nextBoard.setMove(nextMove);
				nextBoard.makeMove(nextMove);
				this.nextPossibleBoards.add(nextBoard);
			}
		}
		
		//Type 2: Pop ONLY IF POP NOT USED
		//Need to set move, change board state, change turn, set pop
		
		//If it's player1's turn and they have already used their pop, don't generate pop moves
		if (this.player1popused && this.turn == P1){
			return;
		}
		
		//If it's player2's turn and they have already used their pop, don't generate pop moves
		if (this.player2popused && this.turn == P2){
			return;
		}
		
		for(int i=0; i < this.cols; i++){
			
			//If the bottom chip is this players chip, generate a pop move
			if(boardState[rows-1][i] == turn){
				Board nextBoard = new Board();
				nextBoard.setBoardState(this.boardState);
				nextBoard.setTurn(this.turn);
				nextBoard.setN(this.n);
				
				Move nextMove = new Move(MOVE_TYPE_POP, i);
				nextBoard.setMove(nextMove);
				nextBoard.makeMove(nextMove);
				this.nextPossibleBoards.add(nextBoard);
			}
		}
		
	}

	//Return the index of the first open row in the passed column (closet to the bottom of the board)
	//Return -1 if the column is full
	public int getOpenRow(int columnIndex){
		int maxOpenRow = -1;
		for(int i = 0; i < rows; i++){
			if(boardState[i][columnIndex] != BOARD_STATE_EMPTY){
				break;
			}
			maxOpenRow = i;
		}
		return maxOpenRow;
	}
	
	//Update the board state of this board to reflect the execution of the passed move and update the turn
	//Note: always assumes a legal move is made
	public void makeMove(Move move){
		int moveColumn = move.getCol();
		int moveType = move.getType();

		//If it is a put move
		if(moveType == MOVE_TYPE_PUT){
			int rowIndex = this.getOpenRow(moveColumn);
			this.boardState[rowIndex][moveColumn] = turn;
		}
		//If it is a pop move
		else{
			//Remove the bottom piece and shift all others down by one
			for(int i = rows-1; i > 0; i--){
				this.boardState[i][moveColumn] = this.boardState[i-1][moveColumn];
			}
			
			//If player1 used the pop
			if(turn == P1){
				this.player1popused = true;
			}
			//If player2 used the pop
			else{
				this.player2popused = true;
			}
		}
		
		//If player1 moved, set the next move to player2
		if(turn == P1){
			turn = P2;
		}
		//If player2 moved, set the next pove to player1
		else{
			turn = P1;
		}
		
		this.setMove(move);
	}
	
	//Set the board state of this board to the passed board state
	public void setBoardState(int[][] boardState){
		this.boardState = boardState;
	}
	
	//Set the turn of this board to the passed turn
	public void setTurn(int turn){
		this.turn = turn;
	}
	
	//Set the move of this board to the passed move
	public void setMove(Move move){
		this.moveToGetThisBoard = move;
	}
	
	//Get the evaluation value of the board
	public int getEvaluationValue(){
		return evaluationValue;
	}

	//Set the value of n-in-a-row
	public void setN(int n){
		this.n = n;
	}
}

